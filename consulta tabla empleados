#include <windows.h>
#include <sql.h>
#include <sqlext.h>
#include <sqltypes.h>
#include <iostream>
#include <iomanip>
using namespace std;
#define SQL_RESULT_LEN 240
#define SQL_RETURN_CODE_LEN 1000
int main() {
    SQLHANDLE sqlConnHandle;
    SQLHANDLE sqlStmtHandle;
    SQLHANDLE sqlEnvHandle;
    SQLWCHAR retconstring[SQL_RETURN_CODE_LEN];
    sqlConnHandle = NULL;
    sqlStmtHandle = NULL;
    sqlEnvHandle = NULL;
    if (SQL_SUCCESS != SQLAllocHandle(SQL_HANDLE_ENV, SQL_NULL_HANDLE, &sqlEnvHandle))
        goto COMPLETED;
    if (SQL_SUCCESS != SQLSetEnvAttr(sqlEnvHandle, SQL_ATTR_ODBC_VERSION, (SQLPOINTER)SQL_OV_ODBC3, 0))
        goto COMPLETED;
    if (SQL_SUCCESS != SQLAllocHandle(SQL_HANDLE_DBC, sqlEnvHandle, &sqlConnHandle))
        goto COMPLETED;
    // Producción
    cout << "Intentando conexion a SQL Server...";
    cout << "\n";
    // Conectar al servidor SQL, usando una conexión confiable y el puerto 1433
    // No importa si está usando una instancia predeterminada o con nombre
    // Definir el nombre del servidor y el puerto
    // en esta actividad utilizaremos la una conexión segura
    switch (SQLDriverConnect(sqlConnHandle,
        NULL,
        (SQLWCHAR*)L"DRIVER={SQL Server};SERVER=localhost,1433;DATABASE=UNI;Trusted=true;",
        SQL_NTS,
        retconstring,
        1024,
        NULL,
        SQL_DRIVER_NOPROMPT)) {
    case SQL_SUCCESS:
    case SQL_SUCCESS_WITH_INFO:
        cout << "Conectado con exito a SQL Server";
        cout << "\n";
        break;
    case SQL_INVALID_HANDLE:
    case SQL_ERROR:
        cout << "No se pudo conectar a SQL Server";
        cout << "\n";
        goto COMPLETED;
    default:
        break;
    }

    if (SQL_SUCCESS != SQLAllocHandle(SQL_HANDLE_STMT, sqlConnHandle, &sqlStmtHandle))
        goto COMPLETED;
    // Producción
    cout << "\n";
    cout << "Ejecutando consulta T-SQL...";
    cout << "\n";
    // Ejecutar la consulta SELECT en la tabla de empleados
    if (SQL_SUCCESS != SQLExecDirect(sqlStmtHandle, (SQLWCHAR*)L"SELECT * FROM empleados", SQL_NTS)) {
        cout << "Error al consultar la tabla de empleados";
        cout << "\n";
        goto COMPLETED;
    }
    else {
        // Declarar variables para los resultados de la consulta
        SQLCHAR numeroEmpleado[SQL_RESULT_LEN];
        SQLCHAR nombreEmpleado[SQL_RESULT_LEN];
        SQLCHAR apellidoPaterno[SQL_RESULT_LEN];
        SQLCHAR apellidoMaterno[SQL_RESULT_LEN];
        SQLCHAR fechaNacimiento[SQL_RESULT_LEN];
        SQLCHAR rfc[SQL_RESULT_LEN];
        SQLCHAR nombrecentro[SQL_RESULT_LEN];
        SQLCHAR descripcionpuesto[SQL_RESULT_LEN];
        SQLCHAR directivo[SQL_RESULT_LEN];
        SQLRETURN ret;
        cout << "\n";
        cout << "+---------+----------------+------------+-------------+-------------------------------+-------------------------+---------------+\n";
        cout << "|         |    Nombre  +   |            |             |                               |                         |               |\n";
        cout << "|  Numero |    Apellido    | Fecha de   |             |                               |       Descripcion       |               |\n";
        cout << "|    de   |    Paterno +   | Nacimiento |     RFC     |         Nombre de Centro      |       del Puesto        | Es directivo? |\n";
        cout << "| Empleado|    Apellido    |            |             |                               |                         |               |\n";
        cout << "|         |    Materno     |            |             |                               |                         |               |\n";
        cout << "+---------+----------------+------------+-------------+-------------------------------+-------------------------+---------------+\n";
        while ((ret = SQLFetch(sqlStmtHandle)) == SQL_SUCCESS || ret == SQL_SUCCESS_WITH_INFO) {
            // Obtener los datos de cada columna
            SQLGetData(sqlStmtHandle, 1, SQL_CHAR, numeroEmpleado, SQL_RESULT_LEN, NULL);
            SQLGetData(sqlStmtHandle, 2, SQL_CHAR, nombreEmpleado, SQL_RESULT_LEN, NULL);
            SQLGetData(sqlStmtHandle, 3, SQL_CHAR, apellidoPaterno, SQL_RESULT_LEN, NULL);
            SQLGetData(sqlStmtHandle, 4, SQL_CHAR, apellidoMaterno, SQL_RESULT_LEN, NULL);
            SQLGetData(sqlStmtHandle, 5, SQL_CHAR, fechaNacimiento, SQL_RESULT_LEN, NULL);
            SQLGetData(sqlStmtHandle, 6, SQL_CHAR, rfc, SQL_RESULT_LEN, NULL);
            SQLGetData(sqlStmtHandle, 7, SQL_CHAR, nombrecentro, SQL_RESULT_LEN, NULL);
            SQLGetData(sqlStmtHandle, 8, SQL_CHAR, descripcionpuesto, SQL_RESULT_LEN, NULL);
            SQLGetData(sqlStmtHandle, 9, SQL_CHAR, directivo, SQL_RESULT_LEN, NULL);
            // Mostrar los datos de cada empleado
            cout << "|         |" << setw(16) << nombreEmpleado <<"|            |             |                               |                         |               |\n";
            cout << "| " << setw(6) << numeroEmpleado << "  |" << setw(16) << apellidoPaterno << "| " << setw(10) << fechaNacimiento << " |  " << setw(10) << rfc << " |  " << setw(28) << nombrecentro << " |" << setw(24) << descripcionpuesto << " |       " << setw(2) << directivo << "      |\n";
            cout << "|         |" << setw(16) << apellidoMaterno <<"|            |             |                               |                         |               |\n";
            cout << "+---------+----------------+------------+-------------+-------------------------------+-------------------------+---------------+\n";                 
        }
    }
COMPLETED:
    // Liberar recursos y cerrar conexión
    if (sqlStmtHandle != NULL) {
        SQLFreeHandle(SQL_HANDLE_STMT, sqlStmtHandle);
    }
    if (sqlConnHandle != NULL) {
        SQLDisconnect(sqlConnHandle);
        SQLFreeHandle(SQL_HANDLE_DBC, sqlConnHandle);
    }
    if (sqlEnvHandle != NULL) {
        SQLFreeHandle(SQL_HANDLE_ENV, sqlEnvHandle);
    }
    // Pausar la ventana de la consola - salir cuando se presione una tecla
    cout << "\nPresiona cualquier tecla para salir...";
    getchar();
}
